import cilib._
import cilib.pso._
import cilib.pso.Defaults._
import cilib.exec._
import cilib.io._
import scala.math._

import zio.prelude.newtypes.Natural

import zio.prelude.{ Comparison => _, _ }
import zio.stream._

import _root_.benchmarks._


object CEC2005 extends zio.App {
  val swarmSize: Natural = Natural.make(3).toOption.get
  var totalIterations: Natural = Natural.make(6667).toOption.get
  val problemDimensions = 50
  val bounds = Interval(-100.0, 100.0) ^ problemDimensions
  val cmp = Comparison.dominance(Min)

var particleIterations : Natural = Natural.make(totalIterations).toOption.get
//      particleIterations = 1000/*ceil(1.0*totalIterations/swarmSize)*/ /*CALCULATE ITERATIONS FOR EACH PARTICLE - THIS HAS NOT WORKED PROPERLY*/

  /* Convert the NonEmtpyVector into a AtLeast2List structure which
   * guaraantees that there are 2 or more elements; fail otherwise
   */
  def mkAtLeast2List(x: NonEmptyVector[Double]) =
    AtLeast2List.make(x) match {
      case ZValidation.Failure(_, e) => sys.error("Input vector requires at least 2 elements")
      case ZValidation.Success(_, result) => result
    }

  // Define a normal GBest PSO and run it for a single iteration
  val cognitive = Guide.pbest[Mem[Double], Double]
  val social = Guide.gbest[Mem[Double]]
//  val gbestPSO = gbest(0.729844, 1.496180, 1.496180, cognitive, social) 

  val paramSet="cpv01" //PSO-01 config
  val gbestPSO = gbest(0.729844, 1.496180, 1.496180, cognitive, social) //PSO-01 config

//  val paramSet="cpv02" //PSO-02 config
// val gbestPSO = gbest(0.729000, 2.041200 , 0.947700 , cognitive, social) //PSO-02 config
//  val paramSet="cpv03" //PSO-03 config
// val gbestPSO = gbest(0.600, 1.700 , 1.700 , cognitive, social) //PSO-03 config
//  val paramSet="cpv04" //PSO-04 config
// val gbestPSO = gbest(0.721, 1.193 , 1.193 , cognitive, social) //PSO-04 config
//  val paramSet="cpv05" //PSO-05 config
// val gbestPSO = gbest(0.715, 1.700 , 1.700 , cognitive, social) //PSO-05 config
//  val paramSet="cpv06" //PSO-06 config
// val gbestPSO = gbest(0.724, 1.468 , 1.468 , cognitive, social) //PSO-06 config
//  val paramSet="cpv07" //PSO-07 config
// val gbestPSO = gbest(0.785, 1.331 , 1.331 , cognitive, social) //PSO-07 config
//  val paramSet="cpv08" //PSO-08 config
// val gbestPSO = gbest(0.837, 1.255 , 1.255 , cognitive, social) //PSO-08 config
//  val paramSet="cpv09" //PSO-09 config
// val gbestPSO = gbest(0.42 , 1.55  , 1.55  , cognitive, social) //PSO-09 config
//  val paramSet="cpv10" //PSO-10 config
// val gbestPSO = gbest(0.711897, 1.711897 , 1.711897 , cognitive, social) //PSO-10 config
//  val paramSet="cpv11" //PSO-11 config
// val gbestPSO = gbest(0.5 , 1.90   , 1.90  , cognitive, social) //PSO-11 config
//  val paramSet="cpv12" //PSO-12 config
// val gbestPSO = gbest(0.6 , 1.80   , 1.80 , cognitive, social) //PSO-12 config
//  val paramSet="cpv13" //PSO-13 config
// val gbestPSO = gbest(0.1 , 0.950  , 2.850 , cognitive, social) //PSO-13 config
//  val paramSet="cpv14" //PSO-14 config
// val gbestPSO = gbest(-0.1, 0.875  , 2.625 , cognitive, social) //PSO-14 config

/*OLD STATEMENTS val gbestPSO = gbest(-0.1, 0.875  , 2.625 , cognitive, social) 
   val paramSet = "cpv14" *///PSO-14 config

  // RVar
  val swarm =
    Position.createCollection(PSO.createParticle(x => Entity(Mem(x, x.zeroed), x)))(bounds, swarmSize)

  // Define the synchronous iteration of the gbestPSO algorithm
  val iter = Kleisli(Iteration.sync(gbestPSO))

  // Create a stream of problems labelled 'f3'
  var functid: String = "f1";
  val problemStream =
    Runner.staticProblem(functid, Eval.unconstrained((x: NonEmptyVector[Double]) => {
      val nev2 = mkAtLeast2List(x)    /*needed for f3, f4, f6, f13, f14, f21, f22, f23*/
      Feasible(benchmarks.cec.cec2005.Benchmarks.f1(x))
    }))


  type Swarm = NonEmptyVector[Particle[Mem[Double], Double]]

  // A data structure to hold the resulting values.
  // Each class member is mapped to a column within the output file
  final case class Results(min: Double, average: Double)

  def extractSolution(collection: Swarm) = {
    val fitnessValues = collection.map(x =>
      x.pos.objective
        .flatMap(_.fitness match {
          case Left(f) =>
            f match {
              case Feasible(v) => Some(v)
              case _           => None
            }
          case _ => None
        })
        .getOrElse(Double.PositiveInfinity)
    )

    Results(
      min = fitnessValues.toChunk.min,
      average = fitnessValues.toChunk.reduceLeft(_ + _) / fitnessValues.size
    )
  }

  val combinations =
    for {
      r <- RNG.initN(50, 123456789L)
    } yield {
        Runner.foldStep(
          cmp,
          r,
          swarm,
          Runner.staticAlgorithm("GBestPSO", iter),
          problemStream,
          (x: Swarm, _) => RVar.pure(x)
        )
          .map(Runner.measure(extractSolution _))
          .take(particleIterations) // 1000 iterations
    }

  val threads = 1
//  val outputFile = new java.io.File("results/gbest-pso_F1_50rruns_cpv01_20part_50dim_parquet_NEW")
 var outfil:String = "results/gbest-pso_"+functid+"_50rruns_"+paramSet+"_"+swarmSize.toString+"part_"+problemDimensions.toString+"dim_"+particleIterations.toString+"iter.parquet";
 val outputFile = new java.io.File(outfil)
  //val outputFile = new java.io.File("results/gbest-pso_F10_50rruns_"+swarmsize.toString+"70part_50dim_1thread.parquet")

  def run(args: List[String]) = {
    println("Preparing to run")

    ZStream.mergeAll(threads)(combinations: _*)
      .run(parquetSink(outputFile))
      .exitCode
  }
}

/*paramSet == "cpv01") {
//val gbestPSO = gbest(0.729844, 1.496180, 1.496180, cognitive, social) 
//}    //PSO-01 config

 //else if (paramSet=="cpv02") {
//val gbestPSO = gbest(0.729000, 2.041200 , 0.947700 , cognitive, social) 
//}   //PSO-02 config
// else if (paramSet=="cpv03") {
//val gbestPSO = gbest(0.600, 1.700 , 1.700 , cognitive, social) 
//} //PSO-03 config
// else if (paramSet=="cpv04") {
//val gbestPSO = gbest(0.721, 1.193 , 1.193 , cognitive, social) 
/} //PSO-04 config
 else if (paramSet=="cpv05") {
//val gbestPSO = gbest(0.715, 1.700 , 1.700 , cognitive, social) 
} //PSO-05 config
 else if (paramSet=="cpv06") {
//val gbestPSO = gbest(0.724, 1.468 , 1.468 , cognitive, social) 
} //PSO-06 config
 else if (paramSet=="cpv07") {
//val gbestPSO = gbest(0.785, 1.331 , 1.331 , cognitive, social) 
} //PSO-07 config
 else if (paramSet=="cpv08") {
//val gbestPSO = gbest(0.837, 1.255 , 1.255 , cognitive, social) 
} //PSO-08 config
 else if (paramSet=="cpv09") {
///val gbestPSO = gbest(0.42 , 1.55  , 1.55  , cognitive, social) 
} //PSO-09 config
 else if (paramSet=="cpv10") {
//val gbestPSO = gbest(0.711897, 1.711897 , 1.711897 , cognitive, social) 
} //PSO-10 config
 else if (paramSet=="cpv11") {
//val gbestPSO = gbest(0.5 , 1.90   , 1.90  , cognitive, social) 
} //PSO-11 config
 else if (paramSet=="cpv12") {
//val gbestPSO = gbest(0.6 , 1.80   , 1.80 , cognitive, social) 
} //PSO-12 config
 else if (paramSet=="cpv13") {
//val gbestPSO = gbest(0.1 , 0.950  , 2.850 , cognitive, social) 
} ///PSO-13 config
 else if (paramSet=="cpv14") {
//val gbestPSO = gbest(-0.1, 0.875  , 2.625 , cognitive, social) 
} //PSO-14 config*/
